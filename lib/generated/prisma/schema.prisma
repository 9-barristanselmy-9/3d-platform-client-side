generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name                  String
  email                 String                 @unique
  image                 String?
  emailVerified         DateTime?
  password              String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  account               Account[]
  models                Model[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
}

model Model {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  fileName    String
  key         String   @unique
  size        Int
  contentType String
  modelUrl    String // Optional: S3 public or CloudFront URL
  createdAt   DateTime @default(now())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  email  String
  token  String   @unique
  expire DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  email  String
  token  String   @unique
  expire DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  email  String
  token  String   @unique
  expire DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}
